depth.data.df[x , y] <- roots[1]
}
y <- y +1
}
x<-x+1
}
}else if (id == 5) {
col="goldenrod"
nm = "hen"
mx.d <- chars.potholes$depth.max[id]
# quadratic portion coefficients, low order to high order
coeff.quad.v <- c(-15.96, 136.89, 4951.7)
coeff.quad.A <- c(-176.28, 14187, -8648)
# linear portion coefficients
coeff.lin.v <- c(472.5)
coeff.lin.A <- c()
x = 1
y = 5
while (x <= length(data.df$Gregorian)) {
y = 5
while (y<=43) {
if (data.df[x , y] <= coeff.lin.v[1]*0.1) {
depth.data.df[x , y] <- data.df[x ,y] / coeff.lin.v[1]
} else {
roots <- quad.func(coeff.quad.v[3], coeff.quad.v[2],coeff.quad.v[1], data.df[x, y])
depth.data.df[x , y] <- roots[1]
}
y <- y +1
}
x<-x+1
}
}else if (id == 6) {
col="mediumpurple3"
nm = "mouth"
mx.d <- chars.potholes$depth.max[id]
# quadratic portion coefficients, low order to high order
coeff.quad.v <- c(151, -3320, 20600)
coeff.quad.A <- c(-1912, 26930, 36800)
# linear portion coefficients, where d >= 0.1
coeff.lin.v <- c(250)
coeff.lin.A <- c()
x = 1
y = 5
while (x <= length(data.df$Gregorian)) {
y = 5
while (y<=43) {
if (data.df[x , y] <= coeff.lin.v[1]*0.1) {
depth.data.df[x , y] <- data.df[x ,y] / coeff.lin.v[1]
} else {
roots <- quad.func(coeff.quad.v[3], coeff.quad.v[2],coeff.quad.v[1], data.df[x, y])
depth.data.df[x , y] <- roots[1]
}
y <- y +1
}
x<-x+1
}
} else {
col = "black"
}
return(depth.data.df)
}
calc.area.data <- function(data.df, id) {
area.data.df <- data.frame(matrix(ncol=43, nrow=9131))
colnames(area.data.df) <- colnames(data.df)
area.data.df[ , c(1:4)] <- data.df[ , c(1:4)]
if (id == 1){
col = "steelblue"
nm = "bunny"
# mx.A <- chars.potholes$area.max[id]
# check for range of volume, converts to depth differently
# based on regression curves developed by Alex Martin
# quadratic portion coefficients, low order to high order
coeff.quad.v <- c(651.08, -7364.1, 35202)
coeff.quad.A <- c(-515.92, 37752, 25940)
# linear portion coefficients
coeff.lin.v <- c(2667)
coeff.lin.A <- c(35187)
x = 1
y = 5
while (x <= length(data.df$Gregorian)) {
y = 5
while (y<=43) {
if (data.df[x , y] <= 0.1) {
area.data.df[x , y] <- data.df[x ,y] * coeff.lin.A[1]
} else {
area.data.df[x , y] <- coeff.quad.A[3]*(data.df[x, y])^2 + coeff.quad.A[2]*(data.df[x, y]) +coeff.quad.A[1]
}
y <- y + 1
}
x <- x + 1
}
} else if (id == 2) {
col="tan4"
nm = "walnut"
# mx.A <- chars.potholes$area.max[id]
# quadratic portion coefficients, low order to high order
coeff.quad.v <- c(-203.57, 1300.2, 19238)
coeff.quad.A <- c(-699.71, 49183, -12568)
# linear portion coefficients
coeff.lin.v <- c(1188)
coeff.lin.A <- c(40929.1)
x = 1
y = 5
while (x <= length(data.df$Gregorian)) {
y = 5
while (y<=43) {
if (data.df[x , y] <= 0.1) {
area.data.df[x , y] <- data.df[x ,y] * coeff.lin.A[1]
} else {
area.data.df[x , y] <- coeff.quad.A[3]*(data.df[x, y])^2 + coeff.quad.A[2]*(data.df[x, y]) +coeff.quad.A[1]
}
y <- y + 1
}
x <- x + 1
}
}else if (id == 3) {
col="seagreen"
nm = "lettuce"
# mx.A <- chars.potholes$area.max[id]
# quadratic portion coefficients, low order to high order
coeff.quad.v <- c(211.93, -3451.1, 17871)
coeff.quad.A <- c(-1198.1, 20716, 20544)
# linear portion coefficients
coeff.lin.v <- c(455)
coeff.lin.A <- c(10789.4)
x = 1
y = 5
while (x <= length(data.df$Gregorian)) {
y = 5
while (y<=43) {
if (data.df[x , y] <= 0.1) {
area.data.df[x , y] <- data.df[x ,y] * coeff.lin.A[1]
} else {
area.data.df[x , y] <- coeff.quad.A[3]*(data.df[x, y])^2 + coeff.quad.A[2]*(data.df[x, y]) +coeff.quad.A[1]
}
y <- y + 1
}
x <- x + 1
}
}else if (id == 4) {
col="firebrick3"
nm = "cardinal"
# mx.A <- chars.potholes$area.max[id]
# quadratic portion coefficients, low order to high order
coeff.quad.v <- c(-17.083, 980.2, 14492)
coeff.quad.A <- c(-716.91, 32988, -14302)
# linear portion coefficients
coeff.lin.v <- c(298.2)
coeff.lin.A <- c(24388.7)
x = 1
y = 5
while (x <= length(data.df$Gregorian)) {
y = 5
while (y<=43) {
if (data.df[x , y] <= 0.1) {
area.data.df[x , y] <- data.df[x ,y] * coeff.lin.A[1]
} else {
area.data.df[x , y] <- coeff.quad.A[3]*(data.df[x, y])^2 + coeff.quad.A[2]*(data.df[x, y]) +coeff.quad.A[1]
}
y <- y + 1
}
x <- x + 1
}
}else if (id == 5) {
col="goldenrod"
nm = "hen"
# mx.A <- chars.potholes$area.max[id]
# quadratic portion coefficients, low order to high order
coeff.quad.v <- c(-15.96, 136.89, 4951.7)
coeff.quad.A <- c(-176.28, 14187, -8648)
# linear portion coefficients
coeff.lin.v <- c(472.5)
coeff.lin.A <- c(11559.4)
x = 1
y = 5
while (x <= length(data.df$Gregorian)) {
y = 5
while (y<=43) {
if (data.df[x , y] <= 0.1) {
area.data.df[x , y] <- data.df[x ,y] * coeff.lin.A[1]
} else {
area.data.df[x , y] <- coeff.quad.A[3]*(data.df[x, y])^2 + coeff.quad.A[2]*(data.df[x, y]) +coeff.quad.A[1]
}
y <- y + 1
}
x <- x + 1
}
}else if (id == 6) {
col="mediumpurple3"
nm = "mouth"
# mx.A <- chars.potholes$area.max[id]
# quadratic portion coefficients, low order to high order
coeff.quad.v <- c(151, -3320, 20600)
coeff.quad.A <- c(-1912, 26930, 36800)
# linear portion coefficients, where d <= 0.1
coeff.lin.v <- c(250)
coeff.lin.A <- c(11490)
x = 1
y = 5
while (x <= length(data.df$Gregorian)) {
y = 5
while (y<=43) {
if (data.df[x , y] <= 0.1) {
area.data.df[x , y] <- data.df[x ,y] * coeff.lin.A[1]
} else {
area.data.df[x , y] <- coeff.quad.A[3]*(data.df[x, y])^2 + coeff.quad.A[2]*(data.df[x, y]) +coeff.quad.A[1]
}
y <- y + 1
}
x <- x + 1
}
} else {
col = "black"
}
return(area.data.df)
}
# CREATE AND SAVE DEPTH DATA =====
depth.bunny.df <- calc.depth.data(vol.bunny.df, 1)
depth.walnut.df <- calc.depth.data(vol.walnut.df, 2)
depth.lettuce.df <- calc.depth.data(vol.lettuce.df, 3)
depth.cardinal.df <- calc.depth.data(vol.cardinal.df, 4)
depth.hen.df <- calc.depth.data(vol.hen.df, 5)
depth.mouth.df <- calc.depth.data(vol.mouth.df, 6)
# save csv
write.csv(depth.bunny.df, file = "depth_time_series_bunny.csv", sep = ",", col.names = TRUE)
write.csv(depth.walnut.df, file = "depth_time_series_walnut.csv", sep = ",", col.names = TRUE)
write.csv(depth.lettuce.df, file = "depth_time_series_lettuce.csv", sep = ",", col.names = TRUE)
write.csv(depth.cardinal.df, file = "depth_time_series_cardinal.csv", sep = ",", col.names = TRUE)
write.csv(depth.hen.df, file = "depth_time_series_hen.csv", sep = ",", col.names = TRUE)
write.csv(depth.mouth.df, file = "depth_time_series_mouth.csv", sep = ",", col.names = TRUE)
# CREATE AND SAVE AREA DATA =====
area.bunny.df <- calc.area.data(depth.bunny.df, 1)
area.walnut.df <- calc.area.data(depth.walnut.df, 2)
area.lettuce.df <- calc.area.data(depth.lettuce.df, 3)
area.cardinal.df <- calc.area.data(depth.cardinal.df, 4)
area.hen.df <- calc.area.data(depth.hen.df, 5)
area.mouth.df <- calc.area.data(depth.mouth.df, 6)
# save csv
write.csv(area.bunny.df, file = "area_time_series_bunny.csv", sep = ",", col.names = TRUE)
write.csv(area.walnut.df, file = "area_time_series_walnut.csv", sep = ",", col.names = TRUE)
write.csv(area.lettuce.df, file = "area_time_series_lettuce.csv", sep = ",", col.names = TRUE)
write.csv(area.cardinal.df, file = "area_time_series_cardinal.csv", sep = ",", col.names = TRUE)
write.csv(area.hen.df, file = "area_time_series_hen.csv", sep = ",", col.names = TRUE)
write.csv(area.mouth.df, file = "area_time_series_mouth.csv", sep = ",", col.names = TRUE)
knitr::opts_chunk$set(echo = TRUE)
# AUTHOR: BRADY NAHKALA
# LAST REVISED: 03 SEP 2020
# PURPOSE: CREATE FIGURES FOR AWM TECH MEMO PUBLICATION
# 03.23.2020 - updated with new Cardinal and mouth data
#
#
# =======================
library(ggplot2)
library(dplyr)
library(RColorBrewer)
library(gridExtra)
library(tidyr)
library(ggpubr)
library(ggeffects)
# DATA ==================
stats_data <- as.data.frame(read.csv("Stats_Data_All_Potholes_Methods.csv", header=T, sep = ","))
stats_data_course <- as.data.frame(read.csv("Stats_Data_Course_All.csv", header=T, sep = ","))
# AUTHOR: BRADY NAHKALA
# LAST REVISED: 03 SEP 2020
# PURPOSE: CREATE FIGURES FOR AWM TECH MEMO PUBLICATION
# 03.23.2020 - updated with new Cardinal and mouth data
#
#
# =======================
library(ggplot2)
library(dplyr)
library(RColorBrewer)
library(gridExtra)
library(tidyr)
library(ggpubr)
library(ggeffects)
# DATA ==================
stats_data <- as.data.frame(read.csv("Stats_Data_All_Potholes_Methods.csv", header=T, sep = ","))
stats_data_course <- as.data.frame(read.csv("Stats_Data_Course_All.csv", header=T, sep = ","))
head(stats_data)
head(stats_data_course)
nms <- c("Bunny", "Walnut", "Lettuce", "Cardinal", "Hen", "Mouth")
cols <- c("steelblue", "tan4", "seagreen", "firebrick3", "goldenrod", "mediumpurple3")
# FIGURE 3 ==============
stats_data_filter <- stats_data %>%
filter(Method == 3)
stats_data_long <- stats_data_filter[, c(1, 7:11)] %>%
gather(key="Statistic", value = "result", 3:6) %>%
filter(Statistic != "PBIAS")
ylim.p <- c(-0.2, 1.1)
ylim.s <- c(-50, 150)
b <- diff(ylim.p)/diff(ylim.s)
a <- b*(ylim.p[1]-ylim.s[1])
txtsize <- 9
fig3a <- ggplot(stats_data_long, aes(x=Infiltration, y=result, color=Pothole, linetype=Statistic))+
geom_line(size=1.25)+
scale_color_manual(breaks=nms, values=cols)+
geom_hline(aes(yintercept=1))+
geom_hline(aes(yintercept=0),linetype="longdash")+
ylab("NSE, RSR, R^2")+
xlab("")+
theme(text = element_text(size = txtsize))+
theme_bw()+
guides(col=guide_legend(nrow = 3, title.position="top"), linetype=guide_legend(nrow=3, title.position="top"))
fig3b <- ggplot(stats_data_filter)+
geom_line(aes(x=Infiltration, y=PBIAS, color=Pothole), linetype="solid", size=1.5)+
scale_color_manual(breaks=nms, values=cols)+
geom_hline(aes(yintercept=0),linetype="solid")+
ylab("PBIAS")+
xlab("Infiltration (mm/d)")+
theme(text = element_text(size = txtsize))+
theme_bw()
png("Fig3_Calibration.png", width=90, height=180, units="mm", res=200)
# windows()
ggarrange(fig3a, fig3b, ncol=1, common.legend = T, legend = "top")
dev.off()
ggarrange(fig3a, fig3b, ncol=1, common.legend = T, legend = "top")
# DATA ==================
stats_data <- as.data.frame(read.csv("Stats_Data_All_Potholes_Methods.csv", header=T, sep = ","))
stats_data_course <- as.data.frame(read.csv("Stats_Data_Course_All.csv", header=T, sep = ","))
head(stats_data)
head(stats_data_course)
stats_data_mw <- stats_data[ , c(1:2, 7:11)] %>%
filter(Pothole == "Lettuce" | Pothole == "Walnut") %>%
gather(key="Statistic", value = "result", 4:7) %>%
filter(Statistic !="PBIAS")
stats_data_mw$Method2 <- character(length(stats_data_mw$Pothole))
stats_data_mw <- within(stats_data_mw, Method2[Method == 1] <- "LiDAR-dV")
stats_data_mw <- within(stats_data_mw, Method2[Method == 2] <- "NAIP")
stats_data_mw <- within(stats_data_mw, Method2[Method == 3] <- "LiDAR-SA")
stats_data_mw <- within(stats_data_mw, rm(Method))
stats_data_mw <- stats_data_mw %>%
rename(Method = Method2)
# PLOT ==================
# need to change size of lines - BIGGER!
# currently does not plot PBIAS
fig3 <- ggplot(stats_data_mw, aes(x = Infiltration, y=result, color=Method, linetype=Statistic)) +
geom_line(size=0.5)+
facet_grid(rows = vars(Pothole))+
xlab("Infiltration (mm/d)")+
ylab("NSE, RSR, and R^2")+
theme_bw(base_size = 9)+
theme(legend.position = c(0.6, 0.1), legend.text = element_text(size=5), legend.direction = "vertical", legend.spacing = unit(-3.5, 'mm'), legend.background = element_blank(),
legend.box.background = element_blank(),
legend.key = element_blank())+
guides(col=guide_legend(nrow=1, title = NULL), linetype=guide_legend(nrow=1, title = NULL))
# windows()
fig3
png("01_Fig3_test.png", width=90, height=90, units="mm", res=200)
fig3
dev.off()
rm(fig3)
# DATA ==================
stats_data <- as.data.frame(read.csv("Stats_Data_All_Potholes_Methods.csv", header=T, sep = ","))
stats_data_course <- as.data.frame(read.csv("Stats_Data_Course_All.csv", header=T, sep = ","))
head(stats_data)
head(stats_data_course)
stats_data_mw <- stats_data[ , c(1:2, 7:11)] %>%
filter(Pothole == "Lettuce" | Pothole == "Walnut") %>%
gather(key="Statistic", value = "result", 4:7) %>%
filter(Statistic !="PBIAS")
stats_data_mw$Method2 <- character(length(stats_data_mw$Pothole))
stats_data_mw <- within(stats_data_mw, Method2[Method == 1] <- "LiDAR-dV")
stats_data_mw <- within(stats_data_mw, Method2[Method == 2] <- "NAIP")
stats_data_mw <- within(stats_data_mw, Method2[Method == 3] <- "LiDAR-SA")
stats_data_mw <- within(stats_data_mw, rm(Method))
stats_data_mw <- stats_data_mw %>%
rename(Method = Method2)
# PLOT ==================
# need to change size of lines - BIGGER!
# currently does not plot PBIAS
fig4 <- ggplot(stats_data_mw, aes(x = Infiltration, y=result, color=Method, linetype=Statistic)) +
geom_line(size=0.5)+
facet_grid(rows = vars(Pothole))+
xlab("Infiltration (mm/d)")+
ylab("NSE, RSR, and R^2")+
theme_bw(base_size = 9)+
theme(legend.position = c(0.6, 0.1), legend.text = element_text(size=5), legend.direction = "vertical", legend.spacing = unit(-3.5, 'mm'), legend.background = element_blank(),
legend.box.background = element_blank(),
legend.key = element_blank())+
guides(col=guide_legend(nrow=1, title = NULL), linetype=guide_legend(nrow=1, title = NULL))
# windows()
fig4
png("Fig04_MethodsComparison", width=90, height=90, units="mm", res=200)
fig4
dev.off()
# DATA ==================
# data comes from Cardinal
hydro_data <- as.data.frame(read.csv("hydrograph_data.csv", header=T, sep = ","))
head(hydro_data)
hydro_data_long <- hydro_data %>%
gather(key="Source", value = "Volume", 2:5)
head(hydro_data_long)
Fig5_hydrograph <- ggplot(hydro_data_long, aes(x=as.Date(Date, "%m/%d/%y"), y=Volume, group=Source))+
geom_line(size=0.5, aes(linetype=Source))+
scale_linetype_manual(
name="Data Source",
values = c("dotdash", "longdash", "solid", "dashed"),
labels=c("LiDAR-dV","LiDAR-SA","Monitoring Data", "NAIP")
)+
labs(
x = "Date",
y="Flooded Volume (m^3)"
)+
theme(text = element_text(size=9))+
theme_bw()+
theme(legend.position = c(0.75, 0.75), legend.text = element_text(size=7))
# guides(linetype=guide_legend(nrow = 2, title.position=c(0.75, 0.75)))
# windows()
Fig5_hydrograph
png(filename = "Fig05_Hydrograph.png", width=90, height=90, units="mm", res=200)
Fig5_hydrograph
dev.off()
# DATA =================
data.df <- data.frame("methods"=as.numeric(c(rep(1, 6), rep(2, 6), rep(3, 6))),
"pothole" = c(rep(c("Bunny", "Walnut", "Lettuce", "Cardinal",
"Hen", "Mouth"), 3)),
"capa.ratio" = c(14.4, 6.5, 12.1, 29.3, 10.0, 25.9,
17.1, 9.4, 9.2, 13.3, 5.0, 17.1,
7.5, 3.7, 6.3, 8.7, 6.9, 10.2),
"infiltration" = c(123, 41, 54, 255, 66, 156,
153, 61, 41, 113, 31, 116,
75, 22, 27, 74, 44, 68),
"pothole.area" = c(2.8, 1.5, 1.1, 0.44, 0.35, 0.37,
2.35, 1.03, 1.45, 0.97, 0.7, 0.56,
5.35, 2.6, 2.11, 1.49, 0.5, 0.94))
# filtered to method 3
data.three.df <- data.df[13:18, ]
# linear model
l.bun <- lm(log(infiltration) ~ log(pothole.area), data=data.df[c(1, 7, 13), ])
Fig6 <- ggplot(data = data.df, aes(x = log(pothole.area), y = log(infiltration), color=pothole))+
geom_point()+
#geom_line(aes(x=pothole.area, y=60*pothole.area^-1))+
stat_smooth(method = 'lm', se=FALSE)+
ylab("Log of Calibrated Infiltration (mm/day)")+
xlab("Log of Pothole Surface Area (ha)")+
labs(color="Pothole")+
theme_bw(base_size = 9)+
theme(legend.position = "top")
png(filename="Fig6_PowerCurves.png", width=90, height=90, units="mm", res=200)
# windows()
Fig6
dev.off()
Fig6
# DATA =================
data.df <- data.frame("methods"=as.numeric(c(rep(1, 6), rep(2, 6), rep(3, 6))),
"pothole" = c(rep(c("bunny", "walnut", "lettuce", "cardinal",
"hen", "mouth"), 3)),
"capa.ratio" = c(14.4, 6.5, 12.1, 29.3, 10.0, 25.9,
17.1, 9.4, 9.2, 13.3, 5.0, 17.1,
7.5, 3.7, 6.3, 8.7, 6.9, 10.2),
"infiltration" = c(123, 41, 54, 255, 66, 156,
153, 61, 41, 113, 31, 116,
75, 22, 27, 74, 44, 68),
"pothole.area" = c(2.8, 1.5, 1.1, 0.44, 0.35, 0.37,
2.35, 1.03, 1.45, 0.97, 0.7, 0.56,
5.35, 2.6, 2.11, 1.49, 0.5, 0.94))
# filtered to method 3
data.three.df <- data.df[13:18, ]
# PLOT, no filter =================
regr1 <- lm(infiltration ~ capa.ratio, data = data.df)
regr1
Fig7 <- ggplot(data=data.df, aes(x=capa.ratio, y = infiltration))+
geom_point() +
geom_smooth(method = 'lm')+
ylab("Calibrated Infiltration (mm/day)")+
xlab("Microwatershed Area to Pothole Area Ratio")+
theme(text=element_text(size=14))
# png(filename="caparegr.png", width=400, height=400)
# windows()
Fig7
# dev.off()
# PLOT, filter ====================
regr2 <- lm(infiltration ~ capa.ratio, data = data.three.df)
regr2
Fig7filter <- ggplot(data=data.three.df, aes(x=capa.ratio, y = infiltration))+
geom_point() +
geom_smooth(method = 'lm')+
ylab("Calibrated Infiltration (mm/day)")+
xlab("Microwatershed Area to Pothole Area Ratio")+
theme(text=element_text(size=14))
# windows()
# Fig7filter
gscat <- ggscatter(data.three.df, x="capa.ratio", y="infiltration", add="reg.line")+
stat_cor()+
stat_regline_equation()+
labs(
x="Microwatershed Area to Pothole Area Ratio",
y="Calibrated Infiltration (mm/day)"
)
formula <- y ~ poly(x, 1, raw = TRUE)
fig7filter2 <- ggplot(data.three.df, aes(x=capa.ratio, y = infiltration)) +
geom_point() +
stat_smooth(method = "lm", formula = formula) +
stat_regline_equation(
aes(label =  ..eq.label..),
formula = formula,
label.y=100
)+
stat_regline_equation(aes(label = ..adj.rr.label..), formula = formula,
label.y=90)+
labs(
x="Microwatershed Area to Pothole Area Ratio",
y="Calibrated Infiltration (mm/day)"
)+
theme_bw(base_size = 9)
# windows()
fig7filter2
png(filename="caparegr.png", width=90, height=90, units="mm", res=200)
# windows()
fig7filter2
dev.off()
